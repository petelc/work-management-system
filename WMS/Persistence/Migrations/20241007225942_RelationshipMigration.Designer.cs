// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(WMSContext))]
    [Migration("20241007225942_RelationshipMigration")]
    partial class RelationshipMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Domain.ApprovalStatus", b =>
                {
                    b.Property<int>("ApprovalStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApprovalStatusName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ApprovalStatusId");

                    b.ToTable("ApprovalStatuses");

                    b.HasData(
                        new
                        {
                            ApprovalStatusId = 1,
                            ApprovalStatusName = "Pending"
                        },
                        new
                        {
                            ApprovalStatusId = 2,
                            ApprovalStatusName = "Approved"
                        },
                        new
                        {
                            ApprovalStatusId = 3,
                            ApprovalStatusName = "Denied"
                        });
                });

            modelBuilder.Entity("Domain.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("BLOB");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Infrastructure"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Application Development"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Security"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Communications"
                        });
                });

            modelBuilder.Entity("Domain.Change", b =>
                {
                    b.Property<int>("ChangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ApprovalStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ApprovalStatusRef")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryRef")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChangeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EmployeeRef")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PriorityRef")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RequestRef")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RequestorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StatusRef")
                        .HasColumnType("INTEGER");

                    b.HasKey("ChangeId");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("RequestRef")
                        .IsUnique();

                    b.HasIndex("RequestorId");

                    b.HasIndex("StatusId");

                    b.ToTable("Changes");
                });

            modelBuilder.Entity("Domain.ChangesToChangeManager", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChangeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNew")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id", "ChangeId");

                    b.HasIndex("ChangeId");

                    b.ToTable("ChangesToChangeManager");
                });

            modelBuilder.Entity("Domain.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Extension")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Institution")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReportsTo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Priority", b =>
                {
                    b.Property<int>("PriorityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PriorityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PriorityId");

                    b.ToTable("Priorities");

                    b.HasData(
                        new
                        {
                            PriorityId = 1,
                            PriorityName = "Low"
                        },
                        new
                        {
                            PriorityId = 2,
                            PriorityName = "Standard"
                        },
                        new
                        {
                            PriorityId = 3,
                            PriorityName = "High"
                        },
                        new
                        {
                            PriorityId = 4,
                            PriorityName = "Emergency"
                        });
                });

            modelBuilder.Entity("Domain.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ApprovalStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ApprovalStatusRef")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryRef")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EmployeeRef")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PriorityRef")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RequestRef")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RequestorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StatusRef")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectId");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("RequestRef")
                        .IsUnique();

                    b.HasIndex("RequestorId");

                    b.HasIndex("StatusId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Domain.ProjectToProjectManager", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNew")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectToProjectManager");
                });

            modelBuilder.Entity("Domain.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ApprovalStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChangeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsNew")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequestTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RequestTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RequestTypeRef")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StatusRef")
                        .HasColumnType("INTEGER");

                    b.HasKey("RequestId");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("Domain.RequestToRequestors", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RequestId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsNew")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id", "RequestId");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestToRequestors");
                });

            modelBuilder.Entity("Domain.RequestType", b =>
                {
                    b.Property<int>("RequestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequestTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RequestTypeId");

                    b.ToTable("RequestTypes");

                    b.HasData(
                        new
                        {
                            RequestTypeId = 1,
                            RequestTypeName = "Project Request"
                        },
                        new
                        {
                            RequestTypeId = 2,
                            RequestTypeName = "Change Request"
                        });
                });

            modelBuilder.Entity("Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Change Manager",
                            NormalizedName = "CHANGE MANAGER"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Project Manager",
                            NormalizedName = "PROJECT MANAGER"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Board Memeber",
                            NormalizedName = "BOARD MEMBER"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Tech",
                            NormalizedName = "TECH"
                        });
                });

            modelBuilder.Entity("Domain.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "In-Progress"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "On-Hold"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "Cancelled"
                        },
                        new
                        {
                            StatusId = 4,
                            StatusName = "Completed"
                        },
                        new
                        {
                            StatusId = 5,
                            StatusName = "Pending"
                        });
                });

            modelBuilder.Entity("Domain.Work", b =>
                {
                    b.Property<int>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChangeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChangeRef")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProjectRef")
                        .HasColumnType("INTEGER");

                    b.HasKey("WorkId");

                    b.HasIndex("ChangeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("Domain.WorkItem", b =>
                {
                    b.Property<int>("WorkItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssigneeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardIDNum")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EmployeeRef")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PriorityRef")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("WorkItemId");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("PriorityId");

                    b.ToTable("WorkItems");
                });

            modelBuilder.Entity("Domain.WorkToWorkItem", b =>
                {
                    b.Property<int?>("WorkId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WorkItemId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsComplete")
                        .HasColumnType("INTEGER");

                    b.HasKey("WorkId", "WorkItemId");

                    b.HasIndex("WorkItemId");

                    b.ToTable("WorkToWorkItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Change", b =>
                {
                    b.HasOne("Domain.ApprovalStatus", "ApprovalStatus")
                        .WithMany()
                        .HasForeignKey("ApprovalStatusId");

                    b.HasOne("Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Domain.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("Domain.Request", "Request")
                        .WithOne("Change")
                        .HasForeignKey("Domain.Change", "RequestRef");

                    b.HasOne("Domain.Employee", "Requestor")
                        .WithMany()
                        .HasForeignKey("RequestorId");

                    b.HasOne("Domain.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("ApprovalStatus");

                    b.Navigation("Category");

                    b.Navigation("Priority");

                    b.Navigation("Request");

                    b.Navigation("Requestor");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.ChangesToChangeManager", b =>
                {
                    b.HasOne("Domain.Change", "Change")
                        .WithMany("ChangeManagers")
                        .HasForeignKey("ChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Employee", "Employee")
                        .WithMany("Changes")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Change");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Domain.Project", b =>
                {
                    b.HasOne("Domain.ApprovalStatus", "ApprovalStatus")
                        .WithMany()
                        .HasForeignKey("ApprovalStatusId");

                    b.HasOne("Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Domain.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("Domain.Request", "Request")
                        .WithOne("Project")
                        .HasForeignKey("Domain.Project", "RequestRef");

                    b.HasOne("Domain.Employee", "Requestor")
                        .WithMany()
                        .HasForeignKey("RequestorId");

                    b.HasOne("Domain.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("ApprovalStatus");

                    b.Navigation("Category");

                    b.Navigation("Priority");

                    b.Navigation("Request");

                    b.Navigation("Requestor");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.ProjectToProjectManager", b =>
                {
                    b.HasOne("Domain.Employee", "Employee")
                        .WithMany("Projects")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Project", "Project")
                        .WithMany("ProjectManagers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Request", b =>
                {
                    b.HasOne("Domain.ApprovalStatus", "ApprovalStatus")
                        .WithMany()
                        .HasForeignKey("ApprovalStatusId");

                    b.HasOne("Domain.RequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId");

                    b.HasOne("Domain.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("ApprovalStatus");

                    b.Navigation("RequestType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.RequestToRequestors", b =>
                {
                    b.HasOne("Domain.Employee", "Employee")
                        .WithMany("Requests")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Request", "Request")
                        .WithMany("Requestors")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Domain.Work", b =>
                {
                    b.HasOne("Domain.Change", "Change")
                        .WithMany("Works")
                        .HasForeignKey("ChangeId");

                    b.HasOne("Domain.Project", "Project")
                        .WithMany("Works")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Change");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.WorkItem", b =>
                {
                    b.HasOne("Domain.Employee", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId");

                    b.HasOne("Domain.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.Navigation("Assignee");

                    b.Navigation("Priority");
                });

            modelBuilder.Entity("Domain.WorkToWorkItem", b =>
                {
                    b.HasOne("Domain.Work", "Work")
                        .WithMany("WorkItems")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.WorkItem", "WorkItem")
                        .WithMany("Work")
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");

                    b.Navigation("WorkItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Domain.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Change", b =>
                {
                    b.Navigation("ChangeManagers");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("Domain.Employee", b =>
                {
                    b.Navigation("Changes");

                    b.Navigation("Projects");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Domain.Project", b =>
                {
                    b.Navigation("ProjectManagers");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("Domain.Request", b =>
                {
                    b.Navigation("Change");

                    b.Navigation("Project");

                    b.Navigation("Requestors");
                });

            modelBuilder.Entity("Domain.Work", b =>
                {
                    b.Navigation("WorkItems");
                });

            modelBuilder.Entity("Domain.WorkItem", b =>
                {
                    b.Navigation("Work");
                });
#pragma warning restore 612, 618
        }
    }
}
